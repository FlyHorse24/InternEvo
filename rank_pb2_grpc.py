# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import rank_pb2 as rank__pb2

GRPC_GENERATED_VERSION = '1.69.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in rank_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class RankServiceStub(object):
    """定义服务
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateRank = channel.unary_unary(
                '/rank.RankService/CreateRank',
                request_serializer=rank__pb2.CreateRankRequest.SerializeToString,
                response_deserializer=rank__pb2.RankResponse.FromString,
                _registered_method=True)
        self.GetRank = channel.unary_unary(
                '/rank.RankService/GetRank',
                request_serializer=rank__pb2.GetRankRequest.SerializeToString,
                response_deserializer=rank__pb2.RankResponse.FromString,
                _registered_method=True)
        self.UpdateRank = channel.unary_unary(
                '/rank.RankService/UpdateRank',
                request_serializer=rank__pb2.UpdateRankRequest.SerializeToString,
                response_deserializer=rank__pb2.RankResponse.FromString,
                _registered_method=True)
        self.UpdateSendForwardTimes = channel.unary_unary(
                '/rank.RankService/UpdateSendForwardTimes',
                request_serializer=rank__pb2.UpdateSendForwardTimesRequest.SerializeToString,
                response_deserializer=rank__pb2.RankResponse.FromString,
                _registered_method=True)
        self.UpdateSendBackwardTimes = channel.unary_unary(
                '/rank.RankService/UpdateSendBackwardTimes',
                request_serializer=rank__pb2.UpdateSendBackwardTimesRequest.SerializeToString,
                response_deserializer=rank__pb2.RankResponse.FromString,
                _registered_method=True)
        self.DeleteRank = channel.unary_unary(
                '/rank.RankService/DeleteRank',
                request_serializer=rank__pb2.DeleteRankRequest.SerializeToString,
                response_deserializer=rank__pb2.DeleteRankResponse.FromString,
                _registered_method=True)
        self.GetRankByStageId = channel.unary_unary(
                '/rank.RankService/GetRankByStageId',
                request_serializer=rank__pb2.GetRankByStageIdRequest.SerializeToString,
                response_deserializer=rank__pb2.RankResponse.FromString,
                _registered_method=True)
        self.GetSendForwardTimesByStageId = channel.unary_unary(
                '/rank.RankService/GetSendForwardTimesByStageId',
                request_serializer=rank__pb2.GetSendForwardTimesByStageIdRequest.SerializeToString,
                response_deserializer=rank__pb2.GetSendForwardTimesResponse.FromString,
                _registered_method=True)
        self.GetSendBackwardTimesByStageId = channel.unary_unary(
                '/rank.RankService/GetSendBackwardTimesByStageId',
                request_serializer=rank__pb2.GetSendBackwardTimesByStageIdRequest.SerializeToString,
                response_deserializer=rank__pb2.GetSendBackwardTimesResponse.FromString,
                _registered_method=True)


class RankServiceServicer(object):
    """定义服务
    """

    def CreateRank(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRank(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateRank(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateSendForwardTimes(self, request, context):
        """新增方法
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateSendBackwardTimes(self, request, context):
        """新增方法
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteRank(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRankByStageId(self, request, context):
        """新增方法
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSendForwardTimesByStageId(self, request, context):
        """新增方法
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSendBackwardTimesByStageId(self, request, context):
        """新增方法
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RankServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateRank': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateRank,
                    request_deserializer=rank__pb2.CreateRankRequest.FromString,
                    response_serializer=rank__pb2.RankResponse.SerializeToString,
            ),
            'GetRank': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRank,
                    request_deserializer=rank__pb2.GetRankRequest.FromString,
                    response_serializer=rank__pb2.RankResponse.SerializeToString,
            ),
            'UpdateRank': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateRank,
                    request_deserializer=rank__pb2.UpdateRankRequest.FromString,
                    response_serializer=rank__pb2.RankResponse.SerializeToString,
            ),
            'UpdateSendForwardTimes': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateSendForwardTimes,
                    request_deserializer=rank__pb2.UpdateSendForwardTimesRequest.FromString,
                    response_serializer=rank__pb2.RankResponse.SerializeToString,
            ),
            'UpdateSendBackwardTimes': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateSendBackwardTimes,
                    request_deserializer=rank__pb2.UpdateSendBackwardTimesRequest.FromString,
                    response_serializer=rank__pb2.RankResponse.SerializeToString,
            ),
            'DeleteRank': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteRank,
                    request_deserializer=rank__pb2.DeleteRankRequest.FromString,
                    response_serializer=rank__pb2.DeleteRankResponse.SerializeToString,
            ),
            'GetRankByStageId': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRankByStageId,
                    request_deserializer=rank__pb2.GetRankByStageIdRequest.FromString,
                    response_serializer=rank__pb2.RankResponse.SerializeToString,
            ),
            'GetSendForwardTimesByStageId': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSendForwardTimesByStageId,
                    request_deserializer=rank__pb2.GetSendForwardTimesByStageIdRequest.FromString,
                    response_serializer=rank__pb2.GetSendForwardTimesResponse.SerializeToString,
            ),
            'GetSendBackwardTimesByStageId': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSendBackwardTimesByStageId,
                    request_deserializer=rank__pb2.GetSendBackwardTimesByStageIdRequest.FromString,
                    response_serializer=rank__pb2.GetSendBackwardTimesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rank.RankService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('rank.RankService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RankService(object):
    """定义服务
    """

    @staticmethod
    def CreateRank(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rank.RankService/CreateRank',
            rank__pb2.CreateRankRequest.SerializeToString,
            rank__pb2.RankResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRank(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rank.RankService/GetRank',
            rank__pb2.GetRankRequest.SerializeToString,
            rank__pb2.RankResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateRank(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rank.RankService/UpdateRank',
            rank__pb2.UpdateRankRequest.SerializeToString,
            rank__pb2.RankResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateSendForwardTimes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rank.RankService/UpdateSendForwardTimes',
            rank__pb2.UpdateSendForwardTimesRequest.SerializeToString,
            rank__pb2.RankResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateSendBackwardTimes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rank.RankService/UpdateSendBackwardTimes',
            rank__pb2.UpdateSendBackwardTimesRequest.SerializeToString,
            rank__pb2.RankResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteRank(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rank.RankService/DeleteRank',
            rank__pb2.DeleteRankRequest.SerializeToString,
            rank__pb2.DeleteRankResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRankByStageId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rank.RankService/GetRankByStageId',
            rank__pb2.GetRankByStageIdRequest.SerializeToString,
            rank__pb2.RankResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSendForwardTimesByStageId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rank.RankService/GetSendForwardTimesByStageId',
            rank__pb2.GetSendForwardTimesByStageIdRequest.SerializeToString,
            rank__pb2.GetSendForwardTimesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSendBackwardTimesByStageId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rank.RankService/GetSendBackwardTimesByStageId',
            rank__pb2.GetSendBackwardTimesByStageIdRequest.SerializeToString,
            rank__pb2.GetSendBackwardTimesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
